<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cdn on Sajal Kayan</title>
    <link>https://www.sajalkayan.com/tag/cdn.xml</link>
    <description>Recent content in Cdn on Sajal Kayan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://www.sajalkayan.com/tag/cdn.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>SimpleCDN goes down - a case for using multiple CDN providers</title>
      <link>https://www.sajalkayan.com/simplecdn-goes-down-a-case-for-using-multiple-cdn-providers.html</link>
      <pubDate>Sat, 11 Dec 2010 21:24:49 +0000</pubDate>
      
      <guid>https://www.sajalkayan.com/simplecdn-goes-down-a-case-for-using-multiple-cdn-providers.html</guid>
      <description>CDN provider &lt;a href=&#34;http://www.simplecdn.com/&#34;&gt;SimpleCDN&lt;/a&gt; has been down since last few days, with their customers venting their anger via online channels such as &lt;a href=&#34;http://search.twitter.com/search?q=SimpleCDN&#34;&gt;twitter&lt;/a&gt;.

To know more about what a CDN is, please read &lt;a href=&#34;https://www.sajalkayan.com/make-your-own-cheap-charlie-cdn.html&#34; title=&#34;Make your own cheap charlie CDN&#34;&gt;this post&lt;/a&gt;.

The reason given by them :-

&lt;blockquote&gt;&lt;em&gt;Dear SimpleCDN Customer,

I am writing this letter to update you on a situation that has been developing for the past 72 hours between SimpleCDN and our technology and infrastructure providers, SoftLayer and Hosting Services, Inc.

Two days ago these organizations decided to immediately terminate our contract and suspend service on much of our infrastructure in Dallas, Seattle and Washington, D.C. This infrastructure constitutes the majority of our delivery network for our value services, including on-demand and live streaming services. 

[...]&lt;/em&gt;&lt;/blockquote&gt;

Their full statement can be read at &lt;a href=&#34;http://admin.simplecdn.com/&#34;&gt;http://admin.simplecdn.com/&lt;/a&gt;. Quite likely this won&#39;t be the permanent url for their rant.

My first thought was that they didn&#39;t pay their bills.. but this &lt;a href=&#34;http://twitter.com/#!/SimpleCDN/status/13688306478882816&#34;&gt;doesn&#39;t seem&lt;/a&gt; to be the case here. I&#39;d speculate that this is related to DMCA or even some connection to Wikileaks. We need Softlayer&#39;s side of the story to make an opinion. I&#39;m a Softlayer user for few years, I refuse to believe it that they did it for competitive advantage. There is more to it!

MaxCDN has &lt;a href=&#34;http://blog.maxcdn.com/news/maxcdn-offers-easy-transition-for-stranded-simplecdn-customers/&#34; title=&#34;MaxCDN Offers Easy Transition for Stranded SimpleCDN Customers&#34;&gt;stepped in&lt;/a&gt; to help stranded SimpleCDN customers to get their sites up asap at lower costs.

So... let me be &lt;a href=&#34;http://www.youtube.com/watch?v=cY_oKve-bH0&#34;&gt;Captain Hindsight&lt;/a&gt; here and say what SimpleCDN users should have done all along.

&lt;strong&gt;Keep a hot spare CDN ready to be deployed at a moments notice.&lt;/strong&gt;

There are many CDN services, like &lt;a href=&#34;http://www.softlayer.com/cloudlayer/cdn/&#34;&gt;Softlayer&lt;/a&gt;, &lt;a href=&#34;http://aws.amazon.com/cloudfront/&#34;&gt;CloudFront&lt;/a&gt;, etc which have pay as you go plans, no upfront or monthly costs. Sign up for them, set up your zones, and keep the required CNAMEs handy. If your prime CDN provider goes under, has high latency, or any other issue, switching to these alternate CDNs is simply a change in the DNS zone. This could be automated with &lt;a href=&#34;http://aws.amazon.com/route53/&#34;&gt;Amazon Route 53&lt;/a&gt;.

Very easy to implement for origin pull, for uploaded content it doesn&#39;t hurt to store your content on multiple services for redundancy.

Had the users kept a hot spare CDN provider ready, it would have taken them 5 mins (plus the DNS propagation time) to switch to another provider.

In most cases, where only css, javascript, images are served by the CDN, frequent users such as admins would have these files in their browser cache and may not feel that anything is broken. For such situations, the answer is &lt;a href=&#34;http://blog.patrickmeenan.com/2010/08/passive-vs-active-performance.html&#34; title=&#34;Passive vs Active performance monitoring&#34;&gt;passive monitoring&lt;/a&gt;.

Bottomline: Everything FAILs.... eventually...

Notes:-
&lt;ul&gt;
    &lt;li&gt;This blog is hosted at softlayer&lt;/li&gt;
    &lt;li&gt;This blog uses MaxCDN&lt;/li&gt;
    &lt;li&gt;This blog uses Softlayer&#39;s CDN service&lt;/li&gt;
    &lt;li&gt;Before today i hadn&#39;t heard about SimpleCDN&lt;/li&gt;
&lt;/ul&gt;

&lt;strong&gt;UPDATED: 11:20 (EST) Dec 15&lt;/strong&gt;

The only 2 statements by SoftLayer on this issue comes in the form of tweets.

&lt;em&gt;FYI, our privacy policy prevents us from discussing customer issues in public. We definitely can&#39;t discuss customers of customers.&lt;/em&gt; - &lt;a href=&#34;http://twitter.com/#!/SoftLayer/status/14822398792564736&#34;&gt;twitter&lt;/a&gt;

&lt;em&gt;@simplecdn happy to have you as a direct customer. Send over your requirements so we can price it out for you. ^SK&lt;/em&gt; - &lt;a href=&#34;http://twitter.com/#!/SoftLayer/status/15059240414609408&#34;&gt;twitter&lt;/a&gt;

IMHO the second tweet is rubbing salt on SimpleCDN&#39;s wound.

It is common for companies under legal threat to not make any statements which may or maynot be used against them during litigation.

</description>
    </item>
    
    <item>
      <title>In a CDN&#39;d world, OpenDNS is the enemy!</title>
      <link>https://www.sajalkayan.com/in-a-cdnd-world-opendns-is-the-enemy.html</link>
      <pubDate>Mon, 17 May 2010 17:19:30 +0000</pubDate>
      
      <guid>https://www.sajalkayan.com/in-a-cdnd-world-opendns-is-the-enemy.html</guid>
      <description>While many people are happy with using DNS service providers such as OpenDNS, Google, etc... I will show you here why they may not produce optimal results.

The way most &lt;a href=&#34;http://www.cdnplanet.com/&#34;&gt;CDNs&lt;/a&gt; work is by using DNS routing. When a user attempts to resolve a hostname, the CDN&#39;s DNS server responds with an IP which is closest based on the IP address of the requester. A more detailed insight into the workings of a CDN can be found on an earlier post &#34;&lt;a href=&#34;https://www.sajalkayan.com/make-your-own-cheap-charlie-cdn.html&#34;&gt;Make your own cheap charlie CDN&lt;/a&gt;&#34;

For my test here, I tested from the following locations listed below :-
&lt;ol&gt;
	&lt;li&gt;&lt;a href=&#34;http://www.asianet.co.th/&#34;&gt;True&lt;/a&gt; - Thailand : My personal internet connection provided by the ISP called True Internet.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&#34;http://www.softlayer.com/&#34;&gt;Softlayer&lt;/a&gt; - United States : A server hosted at Softlayer&#39;s Washington DC Datacenter.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&#34;http://aws.amazon.com/ec2/&#34;&gt;EC2&lt;/a&gt; - United States : An EC2 instance at Amazons us-east-1c availability zone.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&#34;http://aws.amazon.com/ec2/&#34;&gt;EC2-EU&lt;/a&gt; - Ireland : An EC2 instance at Amazons eu-west-1 availability zone. - Thanks &lt;a href=&#34;http://twitter.com/LukeInTH&#34;&gt;Luke&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&#34;http://aws.amazon.com/ec2/&#34;&gt;EC2-APAC&lt;/a&gt; - Singapore : An EC2 instance at Amazons ap-southeast-1a availability zone.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&#34;http://www.comhem.se/&#34;&gt;Com Hem&lt;/a&gt; - Sweden : An ISP in sweden. - Thanks &lt;a href=&#34;http://twitter.com/nadam9&#34;&gt;Adam&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&#34;http://www.tataindicombroadband.in/&#34;&gt;Tata&lt;/a&gt; - India : An ISP in India. - Thanks &lt;a href=&#34;http://gaeatimes.com/&#34;&gt;Angsuman&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
The following DNS servers were used to resolve the domains :-
&lt;ol&gt;
	&lt;li&gt;&lt;a href=&#34;http://www.opendns.com/&#34;&gt;OpenDNS&lt;/a&gt; (208.67.222.222 , 208.67.220.220 )- Has different caches in multiple locations(Anycasted) - Chicago, Illinois, USA; Dallas, Texas, USA; Los Angeles, California, USA; Miami, Florida, USA; New York, New York, USA; Palo Alto, California, USA; Seattle, Washington, USA; Washington, DC, USA; Amsterdam, The Netherlands and London, England, UK&lt;/li&gt;
	&lt;li&gt;&lt;a href=&#34;http://code.google.com/speed/public-dns/&#34;&gt;Google Public DNS&lt;/a&gt; (8.8.8.8 , 8.8.4.4 ) - &#34;Google Public DNS servers are available worldwide&#34; . I think Google has their DNS servers in all countries where they have hosting infrastructure.&lt;/li&gt;
	&lt;li&gt;Local DNS - The ISP provided DNS in the different locations.&lt;/li&gt;
&lt;/ol&gt;
The test was done to the following CDN providers :-
&lt;ol&gt;
	&lt;li&gt;&lt;a href=&#34;http://www.internap.com/&#34;&gt;Internap&lt;/a&gt; ( cdn.thaindian.com ) - Uses DNS routing. POPs (Point Of Presence) in the following locations : Atlanta; Boston; Chicago; Dallas; Denver; El Segundo; Houston; Miami; New York; Philadelphia; Phoenix; San Jose; Seattle; Washington, DC; Sydney; Tokyo; Singapore; Hong Kong; Amsterdam; London&lt;/li&gt;
	&lt;li&gt;&lt;a href=&#34;http://www.akamai.com/&#34;&gt;Akamai&lt;/a&gt; ( profile.ak.fbcdn.net ) - AFAIK they have a POP in almost all countries including Thailand. Note: Akamai does not entertain sales queries from Thai companies.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Results:-&lt;/h3&gt;
1) &lt;strong&gt;Internap&lt;/strong&gt; ( using cdn.thaindian.com )
&lt;table style=&#34;font-size: 8pt;&#34; border=&#34;1&#34;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th&gt;Location&lt;/th&gt;
&lt;th colspan=&#34;2&#34;&gt;Opendns&lt;/th&gt;
&lt;th colspan=&#34;2&#34;&gt;Google&lt;/th&gt;
&lt;th colspan=&#34;2&#34;&gt;Local&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;IP Returned&lt;/th&gt;
&lt;th&gt;Ping to IP (ms)&lt;/th&gt;
&lt;th&gt;IP Returned&lt;/th&gt;
&lt;th&gt;Ping to IP (ms)&lt;/th&gt;
&lt;th&gt;IP Returned&lt;/th&gt;
&lt;th&gt;Ping to IP (ms)&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;True (Thailand)&lt;/th&gt;
&lt;td&gt;64.94.126.65&lt;/td&gt;
&lt;td&gt;256&lt;/td&gt;
&lt;td&gt;74.201.0.130&lt;/td&gt;
&lt;td&gt;365&lt;/td&gt;
&lt;td&gt;203.190.126.131&lt;/td&gt;
&lt;td style=&#34;background-color: #ccff99;&#34;&gt;152&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Softlayer (US-East Coast)&lt;/th&gt;
&lt;td&gt;69.88.152.250&lt;/td&gt;
&lt;td style=&#34;background-color: #ccff99;&#34;&gt;1.253&lt;/td&gt;
&lt;td&gt;74.201.0.130&lt;/td&gt;
&lt;td&gt;25.69&lt;/td&gt;
&lt;td&gt;69.88.152.250&lt;/td&gt;
&lt;td&gt;1.388&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;EC2 (US-East Coast)&lt;/th&gt;
&lt;td&gt;69.88.152.250&lt;/td&gt;
&lt;td&gt;2.144&lt;/td&gt;
&lt;td&gt;74.201.0.130&lt;/td&gt;
&lt;td&gt;20.229&lt;/td&gt;
&lt;td&gt;69.88.152.250&lt;/td&gt;
&lt;td style=&#34;background-color: #ccff99;&#34;&gt;2.094&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;EC2 (Europe)&lt;/th&gt;
&lt;td&gt;77.242.194.130&lt;/td&gt;
&lt;td&gt;13.331&lt;/td&gt;
&lt;td&gt;64.7.222.130&lt;/td&gt;
&lt;td&gt;159.422&lt;/td&gt;
&lt;td&gt;77.242.194.130&lt;/td&gt;
&lt;td style=&#34;background-color: #ccff99;&#34;&gt;12.504&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;EC2 (Singapore)&lt;/th&gt;
&lt;td&gt;64.94.126.65&lt;/td&gt;
&lt;td&gt;202&lt;/td&gt;
&lt;td&gt;74.201.0.130&lt;/td&gt;
&lt;td&gt;228&lt;/td&gt;
&lt;td&gt;202.58.12.98&lt;/td&gt;
&lt;td style=&#34;background-color: #ccff99;&#34;&gt;37.260&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Com Hem (Sweden)&lt;/th&gt;
&lt;td&gt;77.242.194.130&lt;/td&gt;
&lt;td&gt;40.035&lt;/td&gt;
&lt;td&gt;64.7.222.130&lt;/td&gt;
&lt;td&gt;189.647&lt;/td&gt;
&lt;td&gt;69.88.148.130&lt;/td&gt;
&lt;td style=&#34;background-color: #ccff99;&#34;&gt;36.310&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Tata (India)&lt;/th&gt;
&lt;td&gt;64.7.222.130&lt;/td&gt;
&lt;td&gt;313.2&lt;/td&gt;
&lt;td&gt;64.74.124.65&lt;/td&gt;
&lt;td&gt;304.1&lt;/td&gt;
&lt;td&gt;203.190.126.131&lt;/td&gt;
&lt;td style=&#34;background-color: #ccff99;&#34;&gt;150&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
2) &lt;strong&gt;Akamai&lt;/strong&gt; ( using profile.ak.fbcdn.net )
&lt;table style=&#34;font-size: 8pt;&#34; border=&#34;1&#34;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th&gt;Location&lt;/th&gt;
&lt;th colspan=&#34;2&#34;&gt;Opendns&lt;/th&gt;
&lt;th colspan=&#34;2&#34;&gt;Google&lt;/th&gt;
&lt;th colspan=&#34;2&#34;&gt;Local&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;IP Returned&lt;/th&gt;
&lt;th&gt;Ping to IP (ms)&lt;/th&gt;
&lt;th&gt;IP Returned&lt;/th&gt;
&lt;th&gt;Ping to IP (ms)&lt;/th&gt;
&lt;th&gt;IP Returned&lt;/th&gt;
&lt;th&gt;Ping to IP (ms)&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;True (Thailand)&lt;/th&gt;
&lt;td&gt;208.50.77.112&lt;/td&gt;
&lt;td&gt;239.4&lt;/td&gt;
&lt;td&gt;60.254.185.83&lt;/td&gt;
&lt;td&gt;138.9&lt;/td&gt;
&lt;td&gt;58.97.45.59&lt;/td&gt;
&lt;td style=&#34;background-color: #ccff99;&#34;&gt;18.88&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Softlayer (US-East Coast)&lt;/th&gt;
&lt;td&gt;72.246.31.57&lt;/td&gt;
&lt;td&gt;1.312&lt;/td&gt;
&lt;td&gt;72.246.31.42&lt;/td&gt;
&lt;td&gt;1.262&lt;/td&gt;
&lt;td&gt;24.143.196.88&lt;/td&gt;
&lt;td style=&#34;background-color: #ccff99;&#34;&gt;0.877&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;EC2 (US-East Coast)&lt;/th&gt;
&lt;td&gt;72.246.31.73&lt;/td&gt;
&lt;td&gt;2.581&lt;/td&gt;
&lt;td&gt;72.246.31.25&lt;/td&gt;
&lt;td style=&#34;background-color: #ccff99;&#34;&gt;1.792&lt;/td&gt;
&lt;td&gt;72.247.242.51&lt;/td&gt;
&lt;td&gt;1.941&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;EC2 (Europe)&lt;/th&gt;
&lt;td&gt;195.59.150.139&lt;/td&gt;
&lt;td style=&#34;background-color: #ccff99;&#34;&gt;13.449&lt;/td&gt;
&lt;td&gt;92.122.207.177&lt;/td&gt;
&lt;td&gt;29.022&lt;/td&gt;
&lt;td&gt;195.59.150.138&lt;/td&gt;
&lt;td&gt;13.516&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;EC2 (Singapore)&lt;/th&gt;
&lt;td&gt;208.50.77.94&lt;/td&gt;
&lt;td&gt;202&lt;/td&gt;
&lt;td&gt;60.254.185.73&lt;/td&gt;
&lt;td&gt;71.7&lt;/td&gt;
&lt;td&gt;124.155.222.10&lt;/td&gt;
&lt;td style=&#34;background-color: #ccff99;&#34;&gt;7.052&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Com Hem (Sweden)&lt;/th&gt;
&lt;td&gt;217.243.192.8&lt;/td&gt;
&lt;td&gt;51.73&lt;/td&gt;
&lt;td&gt;92.123.69.82&lt;/td&gt;
&lt;td&gt;35.972&lt;/td&gt;
&lt;td&gt;92.123.155.139&lt;/td&gt;
&lt;td style=&#34;background-color: #ccff99;&#34;&gt;13.212&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Tata (India)&lt;/th&gt;
&lt;td&gt;209.18.46.113&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;203.106.85.33&lt;/td&gt;
&lt;td&gt;196&lt;/td&gt;
&lt;td&gt;125.252.226.58&lt;/td&gt;
&lt;td style=&#34;background-color: #ccff99;&#34;&gt;100.5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
The ping timings represent the lag to the destination server from the location in question. I will try to update the results from more locations if I can get shell access to a server or PC in other countries. If you are willing to run the tests for me please contact me(or post in comments)
&lt;h3&gt;Conclusion&lt;/h3&gt;
Using OpenDNS or Google Public DNS may be fast in resolving the DNS, but they do not give the ideal results.

In the case of Global DNS providers, the IP of the original requester is not passed along to the CDN&#39;s DNS servers so they are unable to route the user to the nearest POP.

As you can see in the result tables above, when using OpenDNS from Thailand, trying to access static assets of Facebook, I am directed to a server in the USA whereas when using Google&#39;s DNS i am directed to a server in Japan and when using my ISP&#39;s DNS server I access content locally, hosted within my own ISPs network!

While the effect on large websites using CDN is significant, smaller non-CDN&#39;d websites are also effected. Most websites embed widgets, advertising and other assets which are likely to be CDN&#39;d.

The solution would be to use your ISPs DNS server rather than these Global providers. If they really suck so bad, its fairly simple to set up BIND as a caching recursive resolver to resolve hostnames directly bypassing the ISPs crappy service.

&lt;a href=&#34;http://www.linkedin.com/in/billf&#34;&gt;Bill Fumerola&lt;/a&gt;, ex-director of network engineering at OpenDNS &lt;a href=&#34;http://forums.opendns.com/comments.php?DiscussionID=1096#Item_7&#34;&gt;confirms this problem&lt;/a&gt; on OpenDNS forums.

You can run the tests from your own computer using this simple script: &lt;a href=&#34;https://www.sajalkayan.com/dnstest.py&#34; target=&#34;_blank&#34;&gt;dnstest.py&lt;/a&gt;

Here is the named.conf for a recursive server. Set your computer to use 127.0.0.1 as the DNS. - config may differ for you, RTFM and adapt accordingly.
&lt;pre&gt;options {
        directory &#34;/var/named&#34;;
        listen-on {
		127.0.0.1;
        };
        auth-nxdomain yes;
        allow-recursion {
                127.0.0.1;
        };
        dump-file       &#34;/var/named/data/cache_dump.db&#34;;
        statistics-file &#34;/var/named/data/named_stats.txt&#34;;
        memstatistics-file &#34;/var/named/data/named_mem_stats.txt&#34;;

};

//
// a caching only nameserver config
//
zone &#34;.&#34; {
        type hint;
        file &#34;named.ca&#34;;
};

include &#34;/etc/named.rfc1912.zones&#34;;

include &#34;/etc/named.dnssec.keys&#34;;
include &#34;/etc/pki/dnssec-keys/dlv/dlv.isc.org.conf&#34;;&lt;/pre&gt;
EDIT 1: Inverted the axis added test data from Europe
EDIT 2: Added test data from Singapore
EDIT 3: Added test data from Sweden
EDIT 4: Added test data from India
EDIT 5: Added link to Bill Fumerola’s explanation of the problem.

&lt;h3&gt;Shameless plug&lt;/h3&gt;
&lt;a href=&#34;http://www.turbobytes.com/&#34;&gt;Turbobytes&lt;/a&gt; - Faster content delivery using multiple CDNs

</description>
    </item>
    
    <item>
      <title>Make your own cheap charlie CDN</title>
      <link>https://www.sajalkayan.com/make-your-own-cheap-charlie-cdn.html</link>
      <pubDate>Sat, 28 Jun 2008 05:26:21 +0000</pubDate>
      
      <guid>https://www.sajalkayan.com/make-your-own-cheap-charlie-cdn.html</guid>
      <description>&lt;a href=&#34;http://en.wikipedia.org/wiki/Content_Delivery_Network&#34; target=&#34;_self&#34;&gt;CDN&lt;/a&gt; stands for Content Delivery(or Distribution) Network. It is a network of servers usually located in various geographic locations to improve the availability and access speed of a website (or webapp or other media). The main use of CDNs were during the nineteens when inter-continental access was slow, scarce and expensive. Origin server could be in the silicon valley, users from UK would access the node located in UK, so in theory only once the page would be downloaded from the US server to the UK server. Thus allowing the UK visitors to access the page locally resulting in a huge saving in inter-continental bandwidth costs and improved access times for the end users.

CDNs are traditionally a very expensive solution to implement if using any of the &lt;a href=&#34;http://en.wikipedia.org/wiki/Content_Delivery_Network#Commercial_CDNs&#34;&gt;established providers&lt;/a&gt;. The solution in itself is not very complex. I am in the process of implementing my very own CDN. The benefits are simple.
&lt;ul&gt;
	&lt;li&gt;It would reduce load on the origin server&lt;/li&gt;
	&lt;li&gt;Faster access if user downloads pages from a server closer to them&lt;/li&gt;
	&lt;li&gt;Since load on origin server is low, faster access even if cache needs to be refreshed&lt;/li&gt;
&lt;/ul&gt;
Some major portions of the CDN I am looking to implement
&lt;ol&gt;
	&lt;li&gt;&lt;strong&gt;Origin Server(s)&lt;/strong&gt;&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;Geo targeting DNS servers&lt;/strong&gt;&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;Squid Cache&lt;/strong&gt; - Set as Reverse Proxy or web accelerator&lt;/li&gt;
&lt;/ol&gt;
&lt;!--more--&gt;&lt;strong&gt;Origin Server&lt;/strong&gt; : This at the moment is a single server, which may be increased to run mysql and apache on separate boxes to increase productivity. This is up and running and in production.

&lt;strong&gt;Geo targeting DNS servers&lt;/strong&gt; : A perl script making use of Geo::IP and Net::DNS::Nameserver modules to resolve the query based on the origin country of the requester. The DNS script is in very early development. At the moment it is basically the example usage of Net::DNS::Nameserver with the Geo::IP loosely implemented. Need to implement some way of using config files which flush every 10 minutes, so I can use a series of servers runing this script and changes in config can be done on one server and rsynced across all nameservers running this script. The perl script is attached in the end. It would resolve foo.example.com differently if the request came from Malaysia.
&lt;strong&gt;
Squid Cache&lt;/strong&gt; : Squid cache is an Free proxy server which can be setup as a Reverse proxy. Users would query this proxy for pages and the proxy would deliver content, flushing the cache based on the rules defined in the squid.conf file and/or the expires headers tag set by the origin server. It can be setup such that different filetypes are cached in a different manner. Different url patterns need to be cached differently. Queries to some URL patterns by logged-in(based on cookies) users should be direct from origin server. These configurations are a little complicated. My plan for this configuration is attached in the end.

The Geo Dns and Squid would be installed on cheap VPS in a few countries. Will start with one to see how well it scales.

EDIT 1 : Playing with &lt;a href=&#34;http://varnish.projects.linpro.no/&#34;&gt;Varnish&lt;/a&gt; at the moment, considering it over squid.

The Geo Dns perl script :
&lt;pre lang=&#34;perl&#34;&gt;#!/usr/bin/perl

use Geo::IP;
use Net::DNS::Nameserver;
use strict;
use warnings;

sub reply_handler {
my ($qname, $qclass, $qtype, $peerhost,$query) = @_;
my ($rcode, @ans, @auth, @add);

my $gi = Geo::IP-&amp;gt;new(GEOIP_STANDARD);
print &#34;Received query from $peerhost\n&#34;;
my $ip =  substr $peerhost, 7;
my $country = $gi-&amp;gt;country_code_by_addr($ip);
print &#34;--$ip--$country \n\n&#34;;
$query-&amp;gt;print;

if ($qtype eq &#34;A&#34; &amp;amp;&amp;amp; $qname eq &#34;foo.example.com&#34; ) {
my ($ttl, $rdata) = (3600, &#34;10.1.2.3&#34;);
if ($country eq &#34;MY&#34; ) {
$rdata = &#34;10.1.2.4&#34;;
}
push @ans, Net::DNS::RR-&amp;gt;new(&#34;$qname $ttl $qclass $qtype $rdata&#34;);
$rcode = &#34;NOERROR&#34;;
}elsif( $qname eq &#34;foo.example.com&#34; ) {
$rcode = &#34;NOERROR&#34;;

}else{
$rcode = &#34;NXDOMAIN&#34;;
}

# mark the answer as authoritive (by setting the &#39;aa&#39; flag
return ($rcode, \@ans, \@auth, \@add, { aa =&amp;gt; 1 });
}

my $ns = Net::DNS::Nameserver-&amp;gt;new(
LocalPort    =&amp;gt; 53,
ReplyHandler =&amp;gt; \&amp;amp;reply_handler,

Verbose      =&amp;gt; 1,
) || die &#34;couldn&#39;t create nameserver object\n&#34;;

$ns-&amp;gt;main_loop;&lt;/pre&gt;
My idea for squid.conf :
&lt;pre lang=&#34;html&#34;&gt;1) Forward proxy :-

Allow following IPs to browse any website without any caching... allow https also...

a.b.c.d
w.x.y.z
127.0.0.1 (ill do a ssh tunnel)

2) Reverse proxy :-

Rules (to be followed serially, if rule 3 and 5 both match, rule 3 should be used):-

1) All urls ending in the following must be cached for minimum 5 days or expires headder. dont even check to see if file has updated.

.jpg, .gif, .css, .js, .swf, .png  (not case sensitive )

2) POST should never be cached

3) Few URLs should be cached for 30 mins (minimum/maximum) no matter what the expires headder says.

http://www.mysite.com/urla/
http://www.mysite.com/urlc.html
etc...

4) Requests to http://www.mysite.com/sectiona/* :-

* If user has following cookies pass them direct hint : &#34;acl cookie_test req_header Cookie ﻿^.*(comment_author_|wordpress|wp-postpass_).*$&#34;
* http://www.mysite.com/sectiona/sub-section1/* : 30 mins cache no matter what!
* If requester is Googlebot : serve from cache only if it the copy in cache is 5 mins old. else update the cache.
* for other users cache urls ending in .html for 60 mins , rest for 20 mins

5) Requests to http://www.mysite.com/sectionb/*

* no cache unless images.
* Allow access only if user has a particular cookie e.g. secret_word=another_word

6) urls which are NOT in point 4 or 5 :-

* If users have cookie eg. no_cache then pass direct
* 5 min cache for http://www.mysite.com/sectionc/*
* Cache the shit out of everything else for 30 mins

Special Instructions : If origin server is unreachable then show cached result, no matter what. The first cache server is a VPS running ubuntu server with 128 megs of dedicated non-burstable ram and has 4.3 GB diskspace left. resources can be upgraded on request. Where I have mentioned &#34;no matter what&#34; i dont want the proxy server bothering the origin server at all. The origin and proxies will be located far geographically so connection between them may not be optimal.

In case squid allows for URL rewriting, i would like to also map for example :-
us.mysite.com -&amp;gt; www.mysite.com

so if user can access the same stuff by going to www.mysite.com or even us.mysite.com

Also if URL rewriting is possible in Squid, in the future id like to be able to map ... http://www.mysite.com/subfolder as http://somesite.com/subfolder and http://www.mysite.com/anotherfolder as http://anothersite.com/anotherfolder

Also.. if squid supports ssl, would it be possible to use https (and also install some certificate on the squid) then users connection to and from the proxy is encrypted if needed, but the connection between squid and origin server is plaintext ?&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>