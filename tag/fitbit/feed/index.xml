<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fitbit on Sajal Kayan</title>
    <link>https://www.sajalkayan.com/tag/fitbit.xml</link>
    <description>Recent content in Fitbit on Sajal Kayan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://www.sajalkayan.com/tag/fitbit.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Figuring out MAC address of a fitbit tracker</title>
      <link>https://www.sajalkayan.com/post/fitbit-bluetooth-mac.html</link>
      <pubDate>Sat, 24 Sep 2016 15:30:00 +0000</pubDate>
      
      <guid>https://www.sajalkayan.com/post/fitbit-bluetooth-mac.html</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://www.sajalkayan.com/post/presence-bluetooth.html&#34;&gt;Last week I posted&lt;/a&gt; about potentially using my fitbit Charge HR for presence, and was looking for some way to figure out its MAC address. Here are some ways to do it.&lt;/p&gt;

&lt;h4 id=&#34;ble-scan&#34;&gt;BLE scan&lt;/h4&gt;

&lt;p&gt;First make sure the tracker is not connected to your phone. The simplest way is to turn off bluetooth on the phone (or force-close the fitbit app). Once this is done, the tracker not connected to any host app, starts advertising using bluetooth low energy.&lt;/p&gt;

&lt;p&gt;Then from some linux host with BLE enabled adapter (in my case raspberry pi 3 ) run a &lt;code&gt;lescan&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;pi@raspberrypi:~$ sudo hcitool lescan
LE Scan ...
xx:xx:xx:xx:xx:xx &lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;unknown&lt;span style=&#34;color: #333333&#34;&gt;)&lt;/span&gt;
yy:yy:yy:yy:yy:yy &lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;unknown&lt;span style=&#34;color: #333333&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;12&lt;/span&gt;:34:56:78:9A:BC &lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;unknown&lt;span style=&#34;color: #333333&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;12&lt;/span&gt;:34:56:78:9A:BC Charge HR
^Cpi@raspberrypi:~$ 
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since there is only 1 Charge HR detected, I can be fairly confident that &lt;code&gt;12:34:56:78:9A:BC&lt;/code&gt; belongs to me.&lt;/p&gt;

&lt;h4 id=&#34;syncing-using-galileo&#34;&gt;Syncing using Galileo&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://bitbucket.org/benallard/galileo/&#34;&gt;Galileo&lt;/a&gt; is project that allows you to sync your tracker using the bundled dongle that comes with fitbit. It&amp;rsquo;s python and useful if you use linux since fitbit does not provide software for it.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;sajal@sajal-lappy:~/path/to/galileo$ ./run --fitbit-server client.fitbit.com --force -v
&lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;2016&lt;/span&gt;-09-24 &lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;22&lt;/span&gt;:07:11,549:INFO: Disconnecting from any connected trackers
&lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;2016&lt;/span&gt;-09-24 &lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;22&lt;/span&gt;:07:13,555:INFO: Got an I/O Timeout &lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;&amp;gt; 2000ms&lt;span style=&#34;color: #333333&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;while&lt;/span&gt; reading!
&lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;2016&lt;/span&gt;-09-24 &lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;22&lt;/span&gt;:07:13,559:INFO: Discovering trackers to synchronize
&lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;2016&lt;/span&gt;-09-24 &lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;22&lt;/span&gt;:07:13,565:INFO: Ignoring message: StartDiscovery
&lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;2016&lt;/span&gt;-09-24 &lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;22&lt;/span&gt;:07:17,569:INFO: &lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;1&lt;/span&gt; trackers discovered
&lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;2016&lt;/span&gt;-09-24 &lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;22&lt;/span&gt;:07:17,569:INFO: Attempting to synchronize tracker BC9A78563412
&lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;2016&lt;/span&gt;-09-24 &lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;22&lt;/span&gt;:07:17,575:INFO: Starting new HTTPS connection &lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;)&lt;/span&gt;: client.fitbit.com
&lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;2016&lt;/span&gt;-09-24 &lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;22&lt;/span&gt;:07:24,401:INFO: Getting data from tracker
&lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;2016&lt;/span&gt;-09-24 &lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;22&lt;/span&gt;:07:25,752:INFO: Sending tracker data to Fitbit
&lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;2016&lt;/span&gt;-09-24 &lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;22&lt;/span&gt;:07:25,753:INFO: Starting new HTTPS connection &lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;)&lt;/span&gt;: client.fitbit.com
&lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;2016&lt;/span&gt;-09-24 &lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;22&lt;/span&gt;:07:27,165:INFO: Successfully sent tracker data to Fitbit
&lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;2016&lt;/span&gt;-09-24 &lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;22&lt;/span&gt;:07:27,165:INFO: Passing Fitbit response to tracker
Tracker: BC9A78563412: Synchronisation successful
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note how &lt;code&gt;12:34:56:78:9A:BC&lt;/code&gt; turns into &lt;code&gt;BC9A78563412&lt;/code&gt;. The bytes are reversed.&lt;/p&gt;

&lt;h4 id=&#34;using-fitbit-api&#34;&gt;Using Fitbit API&lt;/h4&gt;

&lt;p&gt;Fetch the list of devices associated to your account using the &lt;a href=&#34;https://dev.fitbit.com/docs/devices/&#34;&gt;Fitbit devices API&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;GET https://api.fitbit.com/1/user/-/devices.json&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #FF0000; background-color: #FFAAAA&#34;&gt;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&lt;/span&gt;[
  {
    &lt;span style=&#34;color: #007700&#34;&gt;&amp;quot;battery&amp;quot;&lt;/span&gt;: &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;High&amp;quot;&lt;/span&gt;,
    &lt;span style=&#34;color: #007700&#34;&gt;&amp;quot;deviceVersion&amp;quot;&lt;/span&gt;: &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;Charge HR&amp;quot;&lt;/span&gt;,
    &lt;span style=&#34;color: #007700&#34;&gt;&amp;quot;features&amp;quot;&lt;/span&gt;: [
      
    ],
    &lt;span style=&#34;color: #007700&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;xxxxxxxxx&amp;quot;&lt;/span&gt;,
    &lt;span style=&#34;color: #007700&#34;&gt;&amp;quot;lastSyncTime&amp;quot;&lt;/span&gt;: &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;2016-09-24T22:07:26.000&amp;quot;&lt;/span&gt;,
    &lt;span style=&#34;color: #007700&#34;&gt;&amp;quot;mac&amp;quot;&lt;/span&gt;: &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;BC9A78563412&amp;quot;&lt;/span&gt;,
    &lt;span style=&#34;color: #007700&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;TRACKER&amp;quot;&lt;/span&gt;
  }
]
&lt;span style=&#34;color: #FF0000; background-color: #FFAAAA&#34;&gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This again shows the reversed-byte MAC address in the &lt;code&gt;mac&lt;/code&gt; field.&lt;/p&gt;

&lt;p&gt;I have updated my &lt;a href=&#34;https://www.sajalkayan.com/post/presence-bluetooth.html#toc_1&#34;&gt;presence script&lt;/a&gt; to continuously run &lt;code&gt;hcitool lescan&lt;/code&gt; and keep a map of devices available. This way if for some reason my phone&amp;rsquo;s bluetooth drops out, I can keep track of myself using the Charge HR since it restarts advertisements once its link to the phone is broken.&lt;/p&gt;

&lt;h4 id=&#34;presence-server-upgrade&#34;&gt;Presence server upgrade&lt;/h4&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;flag&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;log&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;net/http&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;os/exec&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;strings&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;sync&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;
)

&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;var&lt;/span&gt; (
	blereg  = &lt;span style=&#34;color: #007020&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color: #333399; font-weight: bold&#34;&gt;string&lt;/span&gt;]time.Time)
	blesync = &lt;span style=&#34;color: #333333&#34;&gt;&amp;amp;&lt;/span&gt;sync.RWMutex{}
)

&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;func&lt;/span&gt; updateble() {
	log.Println(&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;updating ble table&amp;quot;&lt;/span&gt;)
	cmd &lt;span style=&#34;color: #333333&#34;&gt;:=&lt;/span&gt; exec.Command(&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;timeout&amp;quot;&lt;/span&gt;, &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;--signal&amp;quot;&lt;/span&gt;, &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;SIGINT&amp;quot;&lt;/span&gt;, &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;5&amp;quot;&lt;/span&gt;, &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;hcitool&amp;quot;&lt;/span&gt;, &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;lescan&amp;quot;&lt;/span&gt;)
	b, _ &lt;span style=&#34;color: #333333&#34;&gt;:=&lt;/span&gt; cmd.Output()
	blesync.Lock()
	&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;defer&lt;/span&gt; blesync.Unlock()
	&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;for&lt;/span&gt; _, s &lt;span style=&#34;color: #333333&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;range&lt;/span&gt; strings.Split(&lt;span style=&#34;color: #007020&#34;&gt;string&lt;/span&gt;(b), &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;) {
		sp &lt;span style=&#34;color: #333333&#34;&gt;:=&lt;/span&gt; strings.Split(s, &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;)
		&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;len&lt;/span&gt;(sp) &amp;gt; &lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;1&lt;/span&gt; {
			log.Println(sp[&lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;0&lt;/span&gt;])
			blereg[sp[&lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;0&lt;/span&gt;]] = time.Now()
		}
	}
}

&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;func&lt;/span&gt; l2ping(mac &lt;span style=&#34;color: #333399; font-weight: bold&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color: #333399; font-weight: bold&#34;&gt;bool&lt;/span&gt; {
	log.Println(&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;Checking &amp;quot;&lt;/span&gt;, mac)
	cmd &lt;span style=&#34;color: #333333&#34;&gt;:=&lt;/span&gt; exec.Command(&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;l2ping&amp;quot;&lt;/span&gt;, &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;-c&amp;quot;&lt;/span&gt;, &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;, mac)
	err &lt;span style=&#34;color: #333333&#34;&gt;:=&lt;/span&gt; cmd.Run()
	&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color: #333333&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;nil&lt;/span&gt; {
		log.Println(err)
		&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;false&lt;/span&gt;
	}
	&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;true&lt;/span&gt;

}

&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;var&lt;/span&gt; addr = flag.String(&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;addr&amp;quot;&lt;/span&gt;, &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;:8081&amp;quot;&lt;/span&gt;, &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;address/port to listen on&amp;quot;&lt;/span&gt;)
	&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;func&lt;/span&gt;() {
		&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;for&lt;/span&gt; {
			updateble()
			time.Sleep(time.Second &lt;span style=&#34;color: #333333&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;10&lt;/span&gt;)
		}
	}()
	flag.Parse()
	http.HandleFunc(&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;func&lt;/span&gt;(w http.ResponseWriter, r &lt;span style=&#34;color: #333333&#34;&gt;*&lt;/span&gt;http.Request) {
		mac &lt;span style=&#34;color: #333333&#34;&gt;:=&lt;/span&gt; strings.Split(r.URL.Path, &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;)[&lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;1&lt;/span&gt;]
		&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;if&lt;/span&gt; mac &lt;span style=&#34;color: #333333&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; {
			w.WriteHeader(http.StatusBadRequest)
			&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;return&lt;/span&gt;
		}
		&lt;span style=&#34;color: #888888&#34;&gt;//Check blereg&lt;/span&gt;
		blesync.RLock()
		dur &lt;span style=&#34;color: #333333&#34;&gt;:=&lt;/span&gt; time.Since(blereg[mac])
		blesync.RUnlock()
		log.Println(dur)
		&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;if&lt;/span&gt; dur &amp;lt; time.Minute {
			&lt;span style=&#34;color: #888888&#34;&gt;//BLE registry saw this mac within last minute&lt;/span&gt;
			w.WriteHeader(http.StatusNoContent)
			&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;return&lt;/span&gt;
		}
		&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;if&lt;/span&gt; l2ping(mac) {
			w.WriteHeader(http.StatusNoContent)
			&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;return&lt;/span&gt;
		}
		w.WriteHeader(http.StatusNotFound)
	})
	s &lt;span style=&#34;color: #333333&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #333333&#34;&gt;&amp;amp;&lt;/span&gt;http.Server{
		Addr:           &lt;span style=&#34;color: #333333&#34;&gt;*&lt;/span&gt;addr,
		ReadTimeout:    &lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color: #333333&#34;&gt;*&lt;/span&gt; time.Second,
		WriteTimeout:   &lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color: #333333&#34;&gt;*&lt;/span&gt; time.Second,
		MaxHeaderBytes: &lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;20&lt;/span&gt;,
	}
	log.Fatal(s.ListenAndServe())
}
&amp;lt;&lt;span style=&#34;color: #333333&#34;&gt;/&lt;/span&gt;code&amp;gt;&amp;lt;&lt;span style=&#34;color: #333333&#34;&gt;/&lt;/span&gt;pre&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This runs &lt;code&gt;hcitool lescan&lt;/code&gt; in a loop making note of MACs discovered. When receiving a query it checks if the MAC was seen recently, if not then it tries to ping it on bluetooth classic. I could have use the &lt;a href=&#34;https://godoc.org/github.com/paypal/gatt&#34;&gt;gatt&lt;/a&gt; library to continuously scan over BLE, but on initializing gatt, it takes over the HCI device completely making me unable to run the l2ping command. gatt does not have the capability to do Bluetooth stuff.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>