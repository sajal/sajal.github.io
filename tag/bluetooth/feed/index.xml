<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bluetooth on Sajal Kayan</title>
    <link>https://www.sajalkayan.com/tag/bluetooth.xml</link>
    <description>Recent content in Bluetooth on Sajal Kayan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://www.sajalkayan.com/tag/bluetooth.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Figuring out MAC address of a fitbit tracker</title>
      <link>https://www.sajalkayan.com/post/fitbit-bluetooth-mac.html</link>
      <pubDate>Sat, 24 Sep 2016 15:30:00 +0000</pubDate>
      
      <guid>https://www.sajalkayan.com/post/fitbit-bluetooth-mac.html</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://www.sajalkayan.com/post/presence-bluetooth.html&#34;&gt;Last week I posted&lt;/a&gt; about potentially using my fitbit Charge HR for presence, and was looking for some way to figure out its MAC address. Here are some ways to do it.&lt;/p&gt;

&lt;h4 id=&#34;ble-scan&#34;&gt;BLE scan&lt;/h4&gt;

&lt;p&gt;First make sure the tracker is not connected to your phone. The simplest way is to turn off bluetooth on the phone (or force-close the fitbit app). Once this is done, the tracker not connected to any host app, starts advertising using bluetooth low energy.&lt;/p&gt;

&lt;p&gt;Then from some linux host with BLE enabled adapter (in my case raspberry pi 3 ) run a &lt;code&gt;lescan&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;pi@raspberrypi:~$ sudo hcitool lescan
LE Scan ...
xx:xx:xx:xx:xx:xx &lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;unknown&lt;span style=&#34;color: #333333&#34;&gt;)&lt;/span&gt;
yy:yy:yy:yy:yy:yy &lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;unknown&lt;span style=&#34;color: #333333&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;12&lt;/span&gt;:34:56:78:9A:BC &lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;unknown&lt;span style=&#34;color: #333333&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;12&lt;/span&gt;:34:56:78:9A:BC Charge HR
^Cpi@raspberrypi:~$ 
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since there is only 1 Charge HR detected, I can be fairly confident that &lt;code&gt;12:34:56:78:9A:BC&lt;/code&gt; belongs to me.&lt;/p&gt;

&lt;h4 id=&#34;syncing-using-galileo&#34;&gt;Syncing using Galileo&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://bitbucket.org/benallard/galileo/&#34;&gt;Galileo&lt;/a&gt; is project that allows you to sync your tracker using the bundled dongle that comes with fitbit. It&amp;rsquo;s python and useful if you use linux since fitbit does not provide software for it.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;sajal@sajal-lappy:~/path/to/galileo$ ./run --fitbit-server client.fitbit.com --force -v
&lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;2016&lt;/span&gt;-09-24 &lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;22&lt;/span&gt;:07:11,549:INFO: Disconnecting from any connected trackers
&lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;2016&lt;/span&gt;-09-24 &lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;22&lt;/span&gt;:07:13,555:INFO: Got an I/O Timeout &lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;&amp;gt; 2000ms&lt;span style=&#34;color: #333333&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;while&lt;/span&gt; reading!
&lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;2016&lt;/span&gt;-09-24 &lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;22&lt;/span&gt;:07:13,559:INFO: Discovering trackers to synchronize
&lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;2016&lt;/span&gt;-09-24 &lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;22&lt;/span&gt;:07:13,565:INFO: Ignoring message: StartDiscovery
&lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;2016&lt;/span&gt;-09-24 &lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;22&lt;/span&gt;:07:17,569:INFO: &lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;1&lt;/span&gt; trackers discovered
&lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;2016&lt;/span&gt;-09-24 &lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;22&lt;/span&gt;:07:17,569:INFO: Attempting to synchronize tracker BC9A78563412
&lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;2016&lt;/span&gt;-09-24 &lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;22&lt;/span&gt;:07:17,575:INFO: Starting new HTTPS connection &lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;)&lt;/span&gt;: client.fitbit.com
&lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;2016&lt;/span&gt;-09-24 &lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;22&lt;/span&gt;:07:24,401:INFO: Getting data from tracker
&lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;2016&lt;/span&gt;-09-24 &lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;22&lt;/span&gt;:07:25,752:INFO: Sending tracker data to Fitbit
&lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;2016&lt;/span&gt;-09-24 &lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;22&lt;/span&gt;:07:25,753:INFO: Starting new HTTPS connection &lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;)&lt;/span&gt;: client.fitbit.com
&lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;2016&lt;/span&gt;-09-24 &lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;22&lt;/span&gt;:07:27,165:INFO: Successfully sent tracker data to Fitbit
&lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;2016&lt;/span&gt;-09-24 &lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;22&lt;/span&gt;:07:27,165:INFO: Passing Fitbit response to tracker
Tracker: BC9A78563412: Synchronisation successful
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note how &lt;code&gt;12:34:56:78:9A:BC&lt;/code&gt; turns into &lt;code&gt;BC9A78563412&lt;/code&gt;. The bytes are reversed.&lt;/p&gt;

&lt;h4 id=&#34;using-fitbit-api&#34;&gt;Using Fitbit API&lt;/h4&gt;

&lt;p&gt;Fetch the list of devices associated to your account using the &lt;a href=&#34;https://dev.fitbit.com/docs/devices/&#34;&gt;Fitbit devices API&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;GET https://api.fitbit.com/1/user/-/devices.json&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #FF0000; background-color: #FFAAAA&#34;&gt;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&lt;/span&gt;[
  {
    &lt;span style=&#34;color: #007700&#34;&gt;&amp;quot;battery&amp;quot;&lt;/span&gt;: &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;High&amp;quot;&lt;/span&gt;,
    &lt;span style=&#34;color: #007700&#34;&gt;&amp;quot;deviceVersion&amp;quot;&lt;/span&gt;: &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;Charge HR&amp;quot;&lt;/span&gt;,
    &lt;span style=&#34;color: #007700&#34;&gt;&amp;quot;features&amp;quot;&lt;/span&gt;: [
      
    ],
    &lt;span style=&#34;color: #007700&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;xxxxxxxxx&amp;quot;&lt;/span&gt;,
    &lt;span style=&#34;color: #007700&#34;&gt;&amp;quot;lastSyncTime&amp;quot;&lt;/span&gt;: &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;2016-09-24T22:07:26.000&amp;quot;&lt;/span&gt;,
    &lt;span style=&#34;color: #007700&#34;&gt;&amp;quot;mac&amp;quot;&lt;/span&gt;: &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;BC9A78563412&amp;quot;&lt;/span&gt;,
    &lt;span style=&#34;color: #007700&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;TRACKER&amp;quot;&lt;/span&gt;
  }
]
&lt;span style=&#34;color: #FF0000; background-color: #FFAAAA&#34;&gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This again shows the reversed-byte MAC address in the &lt;code&gt;mac&lt;/code&gt; field.&lt;/p&gt;

&lt;p&gt;I have updated my &lt;a href=&#34;https://www.sajalkayan.com/post/presence-bluetooth.html#toc_1&#34;&gt;presence script&lt;/a&gt; to continuously run &lt;code&gt;hcitool lescan&lt;/code&gt; and keep a map of devices available. This way if for some reason my phone&amp;rsquo;s bluetooth drops out, I can keep track of myself using the Charge HR since it restarts advertisements once its link to the phone is broken.&lt;/p&gt;

&lt;h4 id=&#34;presence-server-upgrade&#34;&gt;Presence server upgrade&lt;/h4&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;flag&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;log&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;net/http&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;os/exec&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;strings&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;sync&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;
)

&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;var&lt;/span&gt; (
	blereg  = &lt;span style=&#34;color: #007020&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color: #333399; font-weight: bold&#34;&gt;string&lt;/span&gt;]time.Time)
	blesync = &lt;span style=&#34;color: #333333&#34;&gt;&amp;amp;&lt;/span&gt;sync.RWMutex{}
)

&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;func&lt;/span&gt; updateble() {
	log.Println(&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;updating ble table&amp;quot;&lt;/span&gt;)
	cmd &lt;span style=&#34;color: #333333&#34;&gt;:=&lt;/span&gt; exec.Command(&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;timeout&amp;quot;&lt;/span&gt;, &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;--signal&amp;quot;&lt;/span&gt;, &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;SIGINT&amp;quot;&lt;/span&gt;, &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;5&amp;quot;&lt;/span&gt;, &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;hcitool&amp;quot;&lt;/span&gt;, &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;lescan&amp;quot;&lt;/span&gt;)
	b, _ &lt;span style=&#34;color: #333333&#34;&gt;:=&lt;/span&gt; cmd.Output()
	blesync.Lock()
	&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;defer&lt;/span&gt; blesync.Unlock()
	&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;for&lt;/span&gt; _, s &lt;span style=&#34;color: #333333&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;range&lt;/span&gt; strings.Split(&lt;span style=&#34;color: #007020&#34;&gt;string&lt;/span&gt;(b), &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;) {
		sp &lt;span style=&#34;color: #333333&#34;&gt;:=&lt;/span&gt; strings.Split(s, &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;)
		&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;len&lt;/span&gt;(sp) &amp;gt; &lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;1&lt;/span&gt; {
			log.Println(sp[&lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;0&lt;/span&gt;])
			blereg[sp[&lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;0&lt;/span&gt;]] = time.Now()
		}
	}
}

&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;func&lt;/span&gt; l2ping(mac &lt;span style=&#34;color: #333399; font-weight: bold&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color: #333399; font-weight: bold&#34;&gt;bool&lt;/span&gt; {
	log.Println(&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;Checking &amp;quot;&lt;/span&gt;, mac)
	cmd &lt;span style=&#34;color: #333333&#34;&gt;:=&lt;/span&gt; exec.Command(&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;l2ping&amp;quot;&lt;/span&gt;, &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;-c&amp;quot;&lt;/span&gt;, &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;, mac)
	err &lt;span style=&#34;color: #333333&#34;&gt;:=&lt;/span&gt; cmd.Run()
	&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color: #333333&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;nil&lt;/span&gt; {
		log.Println(err)
		&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;false&lt;/span&gt;
	}
	&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;true&lt;/span&gt;

}

&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;var&lt;/span&gt; addr = flag.String(&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;addr&amp;quot;&lt;/span&gt;, &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;:8081&amp;quot;&lt;/span&gt;, &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;address/port to listen on&amp;quot;&lt;/span&gt;)
	&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;func&lt;/span&gt;() {
		&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;for&lt;/span&gt; {
			updateble()
			time.Sleep(time.Second &lt;span style=&#34;color: #333333&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;10&lt;/span&gt;)
		}
	}()
	flag.Parse()
	http.HandleFunc(&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;func&lt;/span&gt;(w http.ResponseWriter, r &lt;span style=&#34;color: #333333&#34;&gt;*&lt;/span&gt;http.Request) {
		mac &lt;span style=&#34;color: #333333&#34;&gt;:=&lt;/span&gt; strings.Split(r.URL.Path, &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;)[&lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;1&lt;/span&gt;]
		&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;if&lt;/span&gt; mac &lt;span style=&#34;color: #333333&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; {
			w.WriteHeader(http.StatusBadRequest)
			&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;return&lt;/span&gt;
		}
		&lt;span style=&#34;color: #888888&#34;&gt;//Check blereg&lt;/span&gt;
		blesync.RLock()
		dur &lt;span style=&#34;color: #333333&#34;&gt;:=&lt;/span&gt; time.Since(blereg[mac])
		blesync.RUnlock()
		log.Println(dur)
		&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;if&lt;/span&gt; dur &amp;lt; time.Minute {
			&lt;span style=&#34;color: #888888&#34;&gt;//BLE registry saw this mac within last minute&lt;/span&gt;
			w.WriteHeader(http.StatusNoContent)
			&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;return&lt;/span&gt;
		}
		&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;if&lt;/span&gt; l2ping(mac) {
			w.WriteHeader(http.StatusNoContent)
			&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;return&lt;/span&gt;
		}
		w.WriteHeader(http.StatusNotFound)
	})
	s &lt;span style=&#34;color: #333333&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #333333&#34;&gt;&amp;amp;&lt;/span&gt;http.Server{
		Addr:           &lt;span style=&#34;color: #333333&#34;&gt;*&lt;/span&gt;addr,
		ReadTimeout:    &lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color: #333333&#34;&gt;*&lt;/span&gt; time.Second,
		WriteTimeout:   &lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color: #333333&#34;&gt;*&lt;/span&gt; time.Second,
		MaxHeaderBytes: &lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;20&lt;/span&gt;,
	}
	log.Fatal(s.ListenAndServe())
}
&amp;lt;&lt;span style=&#34;color: #333333&#34;&gt;/&lt;/span&gt;code&amp;gt;&amp;lt;&lt;span style=&#34;color: #333333&#34;&gt;/&lt;/span&gt;pre&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This runs &lt;code&gt;hcitool lescan&lt;/code&gt; in a loop making note of MACs discovered. When receiving a query it checks if the MAC was seen recently, if not then it tries to ping it on bluetooth classic. I could have use the &lt;a href=&#34;https://godoc.org/github.com/paypal/gatt&#34;&gt;gatt&lt;/a&gt; library to continuously scan over BLE, but on initializing gatt, it takes over the HCI device completely making me unable to run the l2ping command. gatt does not have the capability to do Bluetooth stuff.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Detecting presence using Bluetooth</title>
      <link>https://www.sajalkayan.com/post/presence-bluetooth.html</link>
      <pubDate>Sun, 18 Sep 2016 15:53:00 +0000</pubDate>
      
      <guid>https://www.sajalkayan.com/post/presence-bluetooth.html</guid>
      <description>

&lt;p&gt;&lt;em&gt;How to programmatically detect whether I am at home or not?&lt;/em&gt; - That&amp;rsquo;s the problem I am currently trying to solve. In this post I will outline what methods I am using and what I have tried/considered.&lt;/p&gt;

&lt;p&gt;I use this presence information to automatically switch off lights when I leave my home, and turn them on when I &lt;em&gt;return&lt;/em&gt;. By &lt;em&gt;return&lt;/em&gt; I mean when my state changes from &lt;em&gt;not-present&lt;/em&gt; to &lt;em&gt;present&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;previous-solution-wi-fi&#34;&gt;Previous Solution (Wi-Fi)&lt;/h4&gt;

&lt;p&gt;For about a year, I used my phone being present on my Wi-Fi network as an indicator of my presence at home. This approach did not work well for me.&lt;/p&gt;

&lt;p&gt;My router would assign a static IP to my phone using DHCP, and the result of a ping test would indicate my presence.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;#!/bin/bash

ping -c &lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;192&lt;/span&gt;.168.x.x &amp;gt; /dev/null
&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #333333&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #996633&#34;&gt;$?&lt;/span&gt; -eq  &lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #333333&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;then&lt;/span&gt;
	&lt;span style=&#34;color: #888888&#34;&gt;#Sajal is at home...&lt;/span&gt;
&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;else&lt;/span&gt;
	&lt;span style=&#34;color: #888888&#34;&gt;#Sajal is not at home...&lt;/span&gt;
&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;fi&lt;/span&gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I have set my phone to stay on Wi-Fi even if it thinks Internet connectivity is not available. In spite of this, the phone would occasionally disconnect from Wi-Fi (or fail the ping test). Often, when I am at home the lights would go off, and I would need to fiddle with my phone to get it back on Wi-Fi. Almost every morning I would wake up and realize my living room lights are turned on, at some point during the night my code thought I sleep-walked out of my home and returned.&lt;/p&gt;

&lt;p&gt;Also, it would take anywhere between 0 to 100 seconds for the phone to get back onto Wi-Fi once I returned home. This is annoying at night, especially if I have my hands full with groceries.&lt;/p&gt;

&lt;p&gt;I altered this a bit by using arp instead of ping.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;#!/bin/bash

&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #333333&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;$(&lt;/span&gt;arp -n | grep &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;xx:xx:xx:xx:xx:xx&amp;quot;&lt;/span&gt; | wc -l&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;)&lt;/span&gt; -eq  &lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #333333&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;then&lt;/span&gt;
	&lt;span style=&#34;color: #888888&#34;&gt;#Sajal is at home...&lt;/span&gt;
&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;else&lt;/span&gt;
	&lt;span style=&#34;color: #888888&#34;&gt;#Sajal is not at home...&lt;/span&gt;
&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;fi&lt;/span&gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This provides some relief from intermittent Wi-Fi issues because it takes time for arp cache to flush out the information, but most of the problems of the ping method are still applicable.&lt;/p&gt;

&lt;h4 id=&#34;current-solution&#34;&gt;Current Solution&lt;/h4&gt;

&lt;p&gt;Currently I have a Raspberry Pi pinging my phone over Bluetooth to detect presence. All you need for this to work is your phone&amp;rsquo;s Bluetooth MAC address. The phone does not need to be in detectable/scanning mode, just that Bluetooth should be turned on.&lt;/p&gt;

&lt;p&gt;I was originally skeptical about using Bluetooth. I did not expect the signal to cover my entire (1-bedroom) apartment, but turns out it works very well. Now my lights turn on even before I am done opening my door.&lt;/p&gt;

&lt;p&gt;I have the following Go code running on a Raspberry Pi 3 (which has Bluetooth builtin).&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;flag&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;log&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;net/http&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;os/exec&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;strings&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;
)

&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;func&lt;/span&gt; l2ping(mac &lt;span style=&#34;color: #333399; font-weight: bold&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color: #333399; font-weight: bold&#34;&gt;bool&lt;/span&gt; {
	log.Println(&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;Checking &amp;quot;&lt;/span&gt;, mac)
	cmd &lt;span style=&#34;color: #333333&#34;&gt;:=&lt;/span&gt; exec.Command(&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;l2ping&amp;quot;&lt;/span&gt;, &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;-c&amp;quot;&lt;/span&gt;, &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;, mac)
	err &lt;span style=&#34;color: #333333&#34;&gt;:=&lt;/span&gt; cmd.Run()
	&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color: #333333&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;nil&lt;/span&gt; {
		log.Println(err)
		&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;false&lt;/span&gt;
	}
	&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;true&lt;/span&gt;

}

&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;var&lt;/span&gt; addr = flag.String(&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;addr&amp;quot;&lt;/span&gt;, &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;:8081&amp;quot;&lt;/span&gt;, &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;address/port to listen on&amp;quot;&lt;/span&gt;)
	flag.Parse()
	http.HandleFunc(&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;func&lt;/span&gt;(w http.ResponseWriter, r &lt;span style=&#34;color: #333333&#34;&gt;*&lt;/span&gt;http.Request) {
		mac &lt;span style=&#34;color: #333333&#34;&gt;:=&lt;/span&gt; strings.Split(r.URL.Path, &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;)[&lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;1&lt;/span&gt;]
		&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;if&lt;/span&gt; mac &lt;span style=&#34;color: #333333&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; {
			w.WriteHeader(http.StatusBadRequest)
			&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;return&lt;/span&gt;
		}
		&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;if&lt;/span&gt; l2ping(mac) {
			&lt;span style=&#34;color: #888888&#34;&gt;//TODO: Use 204 not 200&lt;/span&gt;
			w.WriteHeader(http.StatusOK)
			&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;return&lt;/span&gt;
		}
		w.WriteHeader(http.StatusNotFound)
	})
	s &lt;span style=&#34;color: #333333&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #333333&#34;&gt;&amp;amp;&lt;/span&gt;http.Server{
		Addr:           &lt;span style=&#34;color: #333333&#34;&gt;*&lt;/span&gt;addr,
		ReadTimeout:    &lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color: #333333&#34;&gt;*&lt;/span&gt; time.Second,
		WriteTimeout:   &lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color: #333333&#34;&gt;*&lt;/span&gt; time.Second,
		MaxHeaderBytes: &lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;20&lt;/span&gt;,
	}
	log.Fatal(s.ListenAndServe())
}
&amp;lt;&lt;span style=&#34;color: #333333&#34;&gt;/&lt;/span&gt;code&amp;gt;&amp;lt;&lt;span style=&#34;color: #333333&#34;&gt;/&lt;/span&gt;pre&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I need to use this http API because the bash script runs on a device without Bluetooth support. My bash script evolved to call the Go code using curl.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;#!/bin/bash

&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #333333&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;$(&lt;/span&gt;curl --write-out %&lt;span style=&#34;color: #333333&#34;&gt;{&lt;/span&gt;http_code&lt;span style=&#34;color: #333333&#34;&gt;}&lt;/span&gt; --silent --output /dev/null http://192.168.x.x:8081/xx:xx:xx:xx:xx:xx&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;)&lt;/span&gt; -eq &lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;200&lt;/span&gt; &lt;span style=&#34;color: #333333&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;then&lt;/span&gt;
	&lt;span style=&#34;color: #888888&#34;&gt;#Sajal is at home...&lt;/span&gt;
&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;else&lt;/span&gt;
	&lt;span style=&#34;color: #888888&#34;&gt;#Sajal is not at home...&lt;/span&gt;
&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;fi&lt;/span&gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Figuring out my phone&amp;rsquo;s Bluetooth MAC address was relatively straightforward.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Put your phone in detectable mode.&lt;/li&gt;
&lt;li&gt;Scan available devices.&lt;/li&gt;
&lt;li&gt;Test if it is pingable. Phone does not need to be detectable any more.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;pi@raspberrypi:~$ hcitool scan
Scanning ...
	yy:yy:yy:yy:yy:yy	KDL-50W800C
	xx:xx:xx:xx:xx:xx	G4
pi@raspberrypi:~$ sudo l2ping -c &lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;4&lt;/span&gt; xx:xx:xx:xx:xx:xx
Ping: xx:xx:xx:xx:xx:xx from zz:zz:zz:zz:zz:zz &lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;data size &lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;44&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;)&lt;/span&gt; ...
&lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;0&lt;/span&gt; bytes from xx:xx:xx:xx:xx:xx id &lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;time&lt;/span&gt; &lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;5&lt;/span&gt;.90ms
&lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;0&lt;/span&gt; bytes from xx:xx:xx:xx:xx:xx id &lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;time&lt;/span&gt; &lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;7&lt;/span&gt;.35ms
&lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;0&lt;/span&gt; bytes from xx:xx:xx:xx:xx:xx id &lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;time&lt;/span&gt; &lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;28&lt;/span&gt;.66ms
&lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;0&lt;/span&gt; bytes from xx:xx:xx:xx:xx:xx id &lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;time&lt;/span&gt; &lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;28&lt;/span&gt;.64ms
&lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;4&lt;/span&gt; sent, &lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;4&lt;/span&gt; received, &lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;0&lt;/span&gt;% loss
pi@raspberrypi:~$ 

&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Apparently &lt;em&gt;KDL-50W800C&lt;/em&gt; is a Sony TV, perhaps belonging to a neighbour, I can&amp;rsquo;t ping it because it&amp;rsquo;s probably too far. The &lt;em&gt;G4&lt;/em&gt; is my phone.&lt;/p&gt;

&lt;p&gt;This method has been in production for the last week, and only once did it give a false negative. My phone was running some upgrades and for some reason Bluetooth stopped working until I rebooted.&lt;/p&gt;

&lt;h4 id=&#34;whats-next&#34;&gt;Whats next?&lt;/h4&gt;

&lt;p&gt;In order to make the presence detection more robust, I am considering the following &lt;strong&gt;in addition&lt;/strong&gt; to the above&amp;hellip;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Somehow detect the presence of my &lt;a href=&#34;https://www.fitbit.com/chargehr&#34;&gt;Fitbit Charge HR tracker&lt;/a&gt;. I &lt;del&gt;can&amp;rsquo;t seem to&lt;/del&gt; &lt;a href=&#34;https://www.sajalkayan.com/post/fitbit-bluetooth-mac.html&#34;&gt;can figure out the MAC address of the tracker&lt;/a&gt;. &lt;del&gt;If someone knows of a way let me know.&lt;/del&gt; Someone else &lt;a href=&#34;http://dotnet.work/2016/02/tracking-fitbit-presence-under-linux-raspberry-pi-2/&#34;&gt;blogged about&lt;/a&gt; using the bundled dongle for this, but it is very unreliable method. If the Fitbit is connected with the phone, &lt;a href=&#34;https://bitbucket.org/benallard/galileo/&#34;&gt;galileo&lt;/a&gt; will not be able to detect it.&lt;/li&gt;
&lt;li&gt;Get a Bluetooth tag and attach to keychain. I see some commercially available tags (example &lt;a href=&#34;https://www.thetileapp.com/&#34;&gt;Tile&lt;/a&gt;), but these tags are meant to work with apps on phones. I don&amp;rsquo;t know if works on regular computers with Bluetooth dongles (Raspberry Pi).&lt;/li&gt;
&lt;li&gt;Motion sensors. These would obviously not work when I am asleep or still&amp;hellip; But it&amp;rsquo;s something to look into, especially since I plan to use it for bathroom lights. Motion sensors might give me some sense of which room I am in, should I need that information for future projects.&lt;/li&gt;
&lt;li&gt;Keycard holders. The type they use in hotels as a master switch for the room. The difference is in my case I would only use it as a signal for presence and not hardwire my mains thru it. Could be a simple mechanical switch wired to GPIO pins of a pi.&lt;/li&gt;
&lt;li&gt;Door sensors. Might have some other useful applications as well.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;discarded-ideas&#34;&gt;Discarded ideas&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Timer based presence. Assume me to be present from some specified time to another specified time.&lt;/li&gt;
&lt;li&gt;GPS+phone based presence solution. At home the GPS is very inaccurate. I would need to add a huge error margin(few hundred meters - or higher if its rain-ey), effectively my system would think I am at home even if I am only in the general vicinity.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;update&#34;&gt;UPDATE&lt;/h4&gt;

&lt;p&gt;I investigated more about the possibility of using my Fitbit Charge HR for presence. It is not a practical option. The pi can detect it, but if I open the Fitbit app on my phone, the Fitbit &lt;a href=&#34;https://community.fitbit.com/t5/Web-API/Charge-HR-and-Bit-Finder-Geo-app/m-p/1106648#M4177&#34;&gt;will stop advertising&lt;/a&gt; until I either force close the Fitbit app, or turn off (and on) the Bluetooth functionality on the phone.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;pi@raspberrypi:~$ sudo timeout --signal SIGINT &lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;5&lt;/span&gt; hcitool lescan
LE Scan ...
xx:xx:xx:xx:xx:xx &lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;unknown&lt;span style=&#34;color: #333333&#34;&gt;)&lt;/span&gt;
xx:xx:xx:xx:xx:xx Charge HR
yy:yy:yy:yy:yy:yy &lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;unknown&lt;span style=&#34;color: #333333&#34;&gt;)&lt;/span&gt;
zz:zz:zz:zz:zz:zz &lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;unknown&lt;span style=&#34;color: #333333&#34;&gt;)&lt;/span&gt;
pi@raspberrypi:~$ &lt;span style=&#34;color: #888888&#34;&gt;#Now open app on phone and sync&lt;/span&gt;
pi@raspberrypi:~$ sudo timeout --signal SIGINT &lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;5&lt;/span&gt; hcitool lescan
LE Scan ...
zz:zz:zz:zz:zz:zz &lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;unknown&lt;span style=&#34;color: #333333&#34;&gt;)&lt;/span&gt;
yy:yy:yy:yy:yy:yy &lt;span style=&#34;color: #333333&#34;&gt;(&lt;/span&gt;unknown&lt;span style=&#34;color: #333333&#34;&gt;)&lt;/span&gt;
pi@raspberrypi:~$ 
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
    </item>
    
  </channel>
</rss>